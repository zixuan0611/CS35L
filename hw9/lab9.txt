A lab notebook for the laboratory: Managing a backported change

export PATH=/usr/local/cs/bin:$PATH
echo $PATH

1. Get a copy of the Diffutils repository in Git format:
   git clone ~eggert/src/gnu/diffutils

2. Get a log of changes to Diffutilsâ€™ master branch:
   cd diffutils
   git log > git-log.txt

3. Generate a list of tags used for Diffutils:
   git tag > git-tags.txt

4. We first use emacs to look into the file git-log.txt:
   emacs git-log.txt
   
   Then we use C-s to search the text:
   C-s     maint: quote 'like this' or "like this", not `like this'

We found the following:
commit 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f
Author: Paul Eggert <eggert@cs.ucla.edu>
Date:   Wed Jan 25 23:46:16 2012 -0800

   Then we quit emacs:
   C-x C-c

   We can generate the patch now:
   git show 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f > quote-patch.txt

5. Check out version 3.0 of Diffutils from the repository:
   git checkout v3.0 -b my3.0

6. patch the file:
   patch -p1 < quote-patch.txt

Problems:
A. There are several files not found: 
   HACKING, doc/diffutils.texi, man/help2man
B. Failure:   
   README:
   Hunk #1 FAILED at 9.
   Hunk #3 FAILED at 60.

   README-hacking:
   Hunk #1 FAILED at 19.

   cfg.mk: 
   Hunk #1 FAILED at 29.
   
   src/diff.c: 
   Hunk #10 FAILED at 876. 
   Hunk #11 FAILED at 906. 
   Hunk #12 FAILED at 942.
   
   src/diff3.c: 
   Hunk #6 FAILED at 433.

7. Get an overview of what happened:
   git status

The output is as follows:
On branch my3.0
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   NEWS
	modified:   README
	modified:   TODO
	modified:   doc/diagmeet.note
	modified:   ms/config.bat
	modified:   ms/config.site
	modified:   po/en.po
	modified:   src/analyze.c
	modified:   src/cmp.c
	modified:   src/context.c
	modified:   src/diff.c
	modified:   src/diff.h
	modified:   src/diff3.c
	modified:   src/dir.c
	modified:   src/ifdef.c
	modified:   src/io.c
	modified:   src/sdiff.c
	modified:   src/side.c
	modified:   src/system.h
	modified:   src/util.c
	modified:   tests/help-version

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	NEWS.orig
	README-hacking.orig
	README-hacking.rej
	README.orig
	README.rej
	cfg.mk.orig
	cfg.mk.rej
	git-log.txt
	git-tags.txt
	ms/config.site.orig
	quote-patch.txt
	src/cmp.c.orig
	src/context.c.orig
	src/diff.c.orig
	src/diff.c.rej
	src/diff.h.orig
	src/diff3.c.orig
	src/diff3.c.rej
	src/dir.c.orig
	src/sdiff.c.orig
	src/system.h.orig
	src/util.c.orig
	tests/help-version.orig

no changes added to commit (use "git add" and/or "git commit -a")

8. I learned how to use the emacs functions vc-diff and vc-revert.

9. I used emacs to open all the following modified files except .c files:
   NEWS, README, TODO, doc/diagmeet.note, ms/config.bat, ms/config.site,
   po/en.po, src/diff.h, src/system.h, tests/help-version.

   Then I used vc-revert to revert all the changes to the above files:
   C-x v u yes
   And quit those files using: C-x C-c
   
   Then I used emacs to edit the remaining .c files. :
   Firstly, I used vc-diff to check what is changed in the file.
   For the files that need to discard all the changes,
   I used vc-revert: C-x v u yes
   For the rest of .c files, I checked every change and manually changed
   ' with ` for the comments that need to be changed:
   M-g g (the lines need to be changed)

10. I firstly used emacs to examine the file:
    emacs src/*.c.rej

    I found I need to change five places for the file src/diff.c,
    and one place for the file src/diff3.c. I used emacs to open these two
    files and then used C-s to search for the keywords. After I found the 
    places needed to change, I manually changed ` to '.

11. remove all untracked files:
    git clean -f

12. Firstly, I used git status:
    git status

The output is as follows:
# On branch my3.0
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   src/cmp.c
#	modified:   src/diff.c
#	modified:   src/diff3.c
#	modified:   src/dir.c
#	modified:   src/sdiff.c
#	modified:   src/util.c
#
no changes added to commit (use "git add" and/or "git commit -a")

    Then I used git diff to get the patch into a file:
    git diff > quote-3.0-patch.txt

13. I firstly read the required file:
    vim README-hacking
    
    Then I build the resulting modified version of Diffutils:
    ./bootstrap
    ./configure
    make
   
    I checked the result by running the commands:
    diff . -
    diff --help

    They both output ' instead of `.

diff . -:
diff: cannot compare '-' to a directory

diff --help:
......
FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE...' or 'FILE... DIR'.
If --from-file or --to-file is given, there are no restrictions on FILE(s).
If a FILE is '-', read standard input.
Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.

The content shown is correct.

14. Do a sanity test:
    cd ..
    mkdir diffutils-3.0
    mkdir diffutils-3.0-patch
    mkdir clone
    cd clone
    git clone ~eggert/src/gnu/diffutils
    cd diffutils
    git checkout v3.0 -b origin
    cd ..
    cd ..
    cp clone/diffutils/src/*.c diffutils-3.0/
    
We copy the former source code into diffutils-3.0 and the latter source
code into diffutils-3.0-patch. Then we use the diff implementation:
diffutils/src/diff -pru diffutils-3.0 diffutils-3.0-patch >quote-3.0-test.txt

15. Compare the contents of quote-3.0-test.txt and quote-3.0-patch.txt:
    diff quote-3.0-test.txt quote-3.0-patch.txt
    
    The files are not identical but the differences are innocuous.
    Such differences are due to the different orders of the .c files.
  
