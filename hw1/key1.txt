Homework: Learning to use Emacs

Exercise 1.1: Moving around in Emacs
1. e m a c s SP e x e r 1 . h t m l Enter
2. C-s H T M L Enter
3. C-s s c a v e n g e r M-b
4. C-s s e l f - r e f e r e n t i a l C-u 2 M-b
5. C-s a r r o w M-b
6. C-e
7. C-a
8. The above way already uses Emacs commands and fewest keystrokes I found.
9. No, I did not use the arrow keys.
10. C-x C-c

Exercise 1.2: Deleting text in Emacs
1. e m a c s SP e x e r 2 . h t m l Enter
2. M-g g 18 Enter C-k
3. C-s D E C-a C-k
4. C-s p e d i a C-s C-a C-k UP C-k DOWN DOWN C-k
5. C-s < ! LEFT LEFT C-d C-d C-d C-d C-d C-d C-d
   DOWN C-a C-k DOWN C-k DOWN C-k DOWN C-k 
   C-s < ! C-a C-k
Final step: C-x C-c y d i f f SP - u SP e x e r 1 . h t m l SP e x e r 2 .
            h t m l SP > e x e r 2 . d i f f Enter
We check the answer with command: diff -u exer1.html exer2.html >exer2.diff

Exercise 1.3: Inserting text in Emacs
1. e m a c s SP e x e r 3 . h t m l Enter
2. C-s A M-f RIGHT 5
   C-s A M-f RIGHT 5
3. M-< C-s U T LEFT C-d C-d C-d C-d S - A S C I I
4. M-< C-s < / o C-e Enter
5. C-x C-s Enter y e s
   d i f f SP - u SP e x e r 1 . h t m l SP e x e r 3 . h t m l SP
   > e x e r 3 . d i f f Enter
We check the answer with command: diff -u exer1.html exer3.html >exer3.diff

Exercise 1.4: Other editing tasks in Emacs
1.c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l
  Enter
2. e m a c s SP e x e r 4 . h t m l Enter
3. C-x ] UP UP RIGHT C-SP DOWN LEFT LEFT M-w M-g g 3 8 0 Enter C-y Enter
4. C-s < ! M-a RIGHT C-SP C-e M-w M-g g 1 8 Enter C-y
   C-s < ! C-s C-s M-a RIGHT C-SP C-e M-w M-g g 1 1 4 Enter C-y
   C-s < ! C-s C-s C-s M-a RIGHT C-SP C-e DOWN DOWN M-w 
   M-g g 3 2 4 Enter C-y DOWN C-k C-k UP C-d UP C-d
   C-s < ! C-s C-s C-s C-s LEFT LEFT C-SP RIGHT RIGHT RIGHT
   RIGHT RIGHT RIGHT RIGHT M-w M-g g 3 6 2 Enter M-b LEFT LEFT LEFT C-y
   C-x ] C-r < ! C-r M-a RIGHT C-SP C-e DOWN DOWN DOWN M-w
   M-g g 3 6 2 Enter C-y DOWN C-k C-k C-k UP C-d UP C-d UP C-d
5. M-g g 3 8 2 Enter C-SP M-> C-w
6. C-x u
7. C-x ] - - > C-r - - - SP Enter < ! - -
8. M-< M-% < o l > Enter < o L > Enter y y y y y y y
   We find 7 instances in total.
9. d i f f SP - u SP e x e r 1 . h t m l SP e x e r 4 . h t m l SP
   > e x e r 4 . d i f f Enter
   We check the answer with the command:
   diff -u exer1.html exer4.html >exer4.diff

Exercise 1.5: Doing commands in Emacs
1. e m a c s Enter M-x m k d i r Enter j u n k Enter
2. M-x c d Enter j u n k Enter C-x C-f h e l l o . c Enter
   # i n c l u d e SP < s t d i o . h > Enter i n t Enter
   m a i n SP ( v o i d ) Enter DELETE DELETE { Enter
   c h a r SP n SP = SP ' \ n ' ; Enter
   c h a r SP b SP = SP ' \ \ ' ; Enter
   c h a r SP q SP = SP ' " ' ; Enter
   c h a r SP c o n s t SP * p SP = SP " # i n c l u d e SP < s t d i o . h >
   % c i n t % c m a i n SP ( v o i d ) % c { % c SP SP c h a r SP n SP
   = SP ' % c n ' ; % c SP SP c h a r SP b SP = SP ' % c % c ' ; % c
   SP SP c h a r SP q SP = SP ' % c ' ; % c SP SP c h a r SP
   c o n s t SP  * p SP = SP % c % s % c ; % c SP SP p r i n t f SP
   ( p , SP n , SP n , SP n , SP n , SP b , SP n , SP b , SP b , SP
   n , SP q , SP n , SP q , SP p , SP q , SP n , SP n , SP n , SP n )
   ; % c SP SP  r e t u r n SP 0 ; % c } % c " ; Enter
   p r i n t f SP ( p , SP n , SP n , SP n , SP n , SP b , SP n , SP 
   b , SP b , SP n , SP q , SP n , SP q , SP p , SP q , SP n , SP 
   n , SP n , SP n ) ; Enter 
   r e t u r n SP 0 ; Enter DELETE DELETE }
   C-x C-c y
3. e m a c s Enter M-x c d Enter j u n k Enter
   M-x c o m p i l e Enter h e l l o . c SP h e l l o Enter 
4. M-x c o m p i l e Enter DOWN . / h e l l o Enter 
   C-x 0 C-x C-w h e l l o - o u t Enter
5. 
-*- mode: compilation; default-directory: "~/junk/" -*-
Compilation started at Sun Jan 14 18:31:46

./hello
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c\
  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n\
, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Compilation finished at Sun Jan 14 18:31:46

C-x C-c
 
Exercise 1.6: Running Elisp code
1. e m a c s Enter C-x b Enter
2. ( r a n d o m ) C-j
   output: 418831109159326851
3. ( s e t q SP x SP ( r a n d o m ) ) C-j
   output: 2264213293101940831
   ( s e t q SP y SP ( r a n d o m ) ) C-j
   output: -1668980889914519232
4. ( - SP x SP y ) C-j
   output: -678491835410927841
   (This is the difference between the two variables)
   This result is not the correct mathematical answer.
   Because there is some overflow occuring.
5. M-: ( - SP x SP y ) C-j
   output: -678491835410927841 (#o332254064247725027437, #x369583453f542f1f)
   The result of the operation is the same. However, 
   it also displays the octadecimal value and hexadecimal value of the result.
6. The two random integers are not truly random in the mathematical sense.
   Actually, the function produces a pseudo-random number.
  In other words, all possible values occur equally in a pseudo-random series.
   So this function uses some algorithm to mimic a random series.
   And the produced numbers are generated from a "seed".
   Therefore, they are not truly random.
7. I took a look at the emacs lisp documentation and 
   got the range for the integers: 
   [-2305843009213693952, 2305843009213693951]
   Because the random function returns all representable integers in Lisp,
   the range for x, y and x-y are the same.
   Now, we can calculate the probability of an incorrect mathematical result,
   which means an overflow occur.
   We can draw the following function on the graph:
   x >= -2305843009213693952
   x <= 2305843009213693951
   y >= -2305843009213693952
   y >= 2305843009213693951
   x-y >= -2305843009213693952
   x-y <= 2305843009213693951
   Now, we can see that the probability of overflowing is the region of
   the upper-left triangle plus the region of the lower-right triangle,
   then divided by the region of the square (according to probability theory)
   Therefore the probablity is:
   (2305843009213693952^2 / 2 + 2305843009213693951^2 / 2)
   / (2305843009213693952 + 2305843009213693951)^2
   = 25% 
   (actually it is equal to 
   0.250000000000000000000000000000000000011754943508222875084...
   so approximately 0.25)
   Hence, assuming (random) is truly random, the probability that the 
   two-variable difference is mathematically incorrect is about 25% (1/4).
   
