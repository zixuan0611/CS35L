A lab notebook for the laboratory: 

1. prepend /usr/local/cs/bin to the PATH
export PATH=/usr/local/cs/bin:$PATH
echo $PATH

2. make a directory for this lab
mkdir multithreaded
cd multithreaded

3. check the version of sort
which sort
gives the output: /usr/local/cs/bin/sort

sort --version
gives the output: 
sort (GNU coreutils) 8.29
Copyright (C) 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Haertel and Paul Eggert.

4. generate a file containing 10,000,000 random single-precision floating point numbers:
Since every single-precision floating point occupies 4 bytes, to get a file
containing 10,000,000 random floats we need at least 40000000 floats.

Then we used od --help to figure out the command we need to use.
The command is as follows:

od -An -f -N 40000000 < /dev/urandom | tr -s ' ' '\n' > yuzu.txt

We then use the following command:
vim yuzu.txt
to check the generated file and we delete the first line which is an empty line.

*The slide gives the command:
od -An -t fF -N size < /dev/urandom 

But we use -f instead of -t fF because we found in help that:
Traditional format specifications may be intermixed; they accumulate:
-f same as -t fF, select floats

5. We do comparisons for various options for sort:

a. withou parallelism:
time -p sort -g yuzu.txt > /dev/null

real 21.28
user 115.17
sys 0.47

b. parallel with 1 thread:
time -p sort -g --parallel=1 yuzu.txt > /dev/null

real 112.40
user 112.20
sys 0.19

c. parallel with 2 threads:
time -p sort -g --parallel=2 yuzu.txt > /dev/null

real 59.39
user 112.99
sys 0.27

d. parallel with 4 threads:
time -p sort -g --parallel=4 yuzu.txt > /dev/null

real 34.29
user 114.73
sys 0.36

e. parallel with 8 threads:
time -p sort -g --parallel=8 yuzu.txt > /dev/null

real 21.18
user 114.92
sys 0.47


